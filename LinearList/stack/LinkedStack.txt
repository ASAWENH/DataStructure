public class LinkedStack {
	private StackNode top;// top of stack
	private int length;

	LinkedStack() {
		top = new StackNode();
		length = 0;
	}

	// push
	public void push(Object o) {
		// TODO Auto-generated method stub
		StackNode n = new StackNode(o, null);
		n.setNext(top);
		top = n;
		length++;
	}

	// pop
	public Object pop() throws Exception {
		// TODO Auto-generated method stub
		Object o = null;
		if (length > 0) {
			o = top.getData();
			top = top.getNext();
			length--;
		} else {
			throw new Exception("stack is empty");
		}
		return o;
	}

	public StackNode getTop() {
		return top;
	}

	public int getLength() {
		return length;
	}

	public static void main(String[] args) throws Exception {
		LinkedStack ST = new LinkedStack();
		ST.push(9);
		ST.push(7);
		ST.push(5);
		ST.push(3);
		ST.push(1);
		ST.push(2);
		ST.push(4);
		ST.push(6);
		ST.push(8);

		int length = ST.getLength();
		for (int i = 0; i < length; i++) {
			System.out.println("[" + i + "," + ST.pop() + "]");
		}
	}
}

class StackNode {
	private Object data;
	private StackNode next;

	StackNode() {
		data = null;
		next = null;
	}

	StackNode(Object o, StackNode n) {
		data = o;
		next = n;
	}

	public void setData(Object data) {
		this.data = data;
	}

	public Object getData() {
		return data;
	}

	public void setNext(StackNode next) {
		this.next = next;
	}

	public StackNode getNext() {
		return next;
	}
}